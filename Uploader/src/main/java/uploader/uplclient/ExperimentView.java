/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uploader.uplclient;


import ij.IJ;
import ij.ImagePlus;
import org.apache.commons.lang3.StringUtils;
import org.nolanlab.CODEX.driffta.Experiment;
import org.nolanlab.CODEX.utils.codexhelper.ExperimentHelper;
import org.nolanlab.CODEX.utils.logger;
import uploader.uplclient.microscope.Microscope;
import org.nolanlab.CODEX.utils.codexhelper.MicroscopeTypeEnum;
import uploader.uplclient.microscope.MicroscopeFactory;
import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 *
 * @author Nikolay Samusik
 */
public class ExperimentView extends javax.swing.JPanel {

    /**
     * Creates new form ExperimentView
     */
    public ExperimentView() {
        expHelper = new ExperimentHelper();
        initComponents();
        val3.setModel(new DefaultComboBoxModel<MicroscopeTypeEnum>(Experiment.getMicroscopeTypes()));

        ItemListener itl = itemEvent -> {
            if(!ExperimentView.this.getCurrentMicroscopeType().equals(MicroscopeTypeEnum.KEYENCE.toString())){
                return;
            }
            int state = itemEvent.getStateChange();
            if (state == ItemEvent.SELECTED) {
                int lowL = 1;
                int upL = getMaxCycNumberFromFolder(new File(getTxtDir().getText()))+1;
                if(upL == 0) {
                    ExperimentView.this.getVal13().setText(String.valueOf(lowL));
                }
                else if(lowL == upL) {
                    ExperimentView.this.getVal13().setText(String.valueOf(lowL));
                }
                else {
                    ExperimentView.this.getVal13().setText(String.valueOf(lowL) + "-" + String.valueOf(upL));
                }
            }  else {
                int lowL = 1;
                int upL = getMaxCycNumberFromFolder(new File(getTxtDir().getText()));
                if(upL == 0) {
                    ExperimentView.this.getVal13().setText(String.valueOf(lowL));
                }
                else if(lowL == upL) {
                    ExperimentView.this.getVal13().setText(String.valueOf(lowL));
                }
                else {
                    ExperimentView.this.getVal13().setText(String.valueOf(lowL) + "-" + String.valueOf(upL));
                }
            }
        };
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        txtDir = new JTextField();
        val1 = new JTextField();
        jTextField1 = new JTextField();
        val2 = new JTextField();
        val3 = new javax.swing.JComboBox<>();
        val4 = new javax.swing.JComboBox<>();
        val23 = new javax.swing.JComboBox<>();
        val5 = new JTextField();
        val6 = new JTextField();
        val7 = new JTextField();
        val8 = new JTextField();
        val9 = new JTextField();
        val10 = new javax.swing.JComboBox<>();
        val11 = new JTextField();
        val21 = new JTextField();
        val12 = new JSpinner();
        val13 = new JTextField();
        val14 = new JTextField();
        val15 = new JTextField();
        val16 = new javax.swing.JComboBox<>();
        val17 = new JTextField();
        val18 = new JTextField();
        val19 = new JTextField();
        val20 = new JTextField();
        jPanel1 = new javax.swing.JPanel();
        rb_HandE_yes = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        bgSubLabel = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        bestFocusCycleLabel = new JLabel();
        bestFocusChannelLabel = new JLabel();
        driftReferenceLabel = new JLabel();

        TitledBorder expDetailsBorder = BorderFactory.createTitledBorder("Experimental Details");
        expDetailsBorder.setTitleJustification(TitledBorder.CENTER);
        jPanel2.setBorder(expDetailsBorder);
        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, BoxLayout.PAGE_AXIS));

        txtUsrname = new JTextField();
        txtUsrname.setMaximumSize(new java.awt.Dimension(3000, 20));
        txtUsrname.setMinimumSize(new java.awt.Dimension(300, 20));
        txtUsrname.setPreferredSize(new java.awt.Dimension(3000, 20));
        jPanel4.add(txtUsrname);

        serverName = new JComboBox<String>();
        serverName.setModel(new DefaultComboBoxModel<>(new String[] { "Left", "Right" }));
        serverName.setSelectedItem("Left");
        serverName.setMaximumSize(new java.awt.Dimension(3000, 20));
        serverName.setMinimumSize(new java.awt.Dimension(300, 20));
        serverName.setPreferredSize(new java.awt.Dimension(3000, 20));
        jPanel4.add(serverName);

        txtDir.setText("...");
        txtDir.setEnabled(false);
        txtDir.setMaximumSize(new java.awt.Dimension(3000, 20));
        txtDir.setMinimumSize(new java.awt.Dimension(300, 20));
        txtDir.setPreferredSize(new java.awt.Dimension(3000, 20));
        txtDir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                txtDirMouseReleased(evt);
            }
        });
        txtDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDirActionPerformed(evt);
            }
        });
        jPanel4.add(txtDir);

        val1.setText("<Enter here>");
        val1.setMaximumSize(new java.awt.Dimension(3000, 20));
        val1.setMinimumSize(new java.awt.Dimension(300, 20));
        val1.setPreferredSize(new java.awt.Dimension(3000, 20));
        val1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val1ActionPerformed(evt);
            }
        });
        jPanel4.add(val1);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jPanel4.add(jTextField1);

        val2.setText("CODEX-MPI");
        val2.setMaximumSize(new java.awt.Dimension(3000, 20));
        val2.setMinimumSize(new java.awt.Dimension(300, 20));
        val2.setPreferredSize(new java.awt.Dimension(3000, 20));
        val2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val2ActionPerformed(evt);
            }
        });
        jPanel4.add(val2);
        jPanel4.add(val3);

        val4.setModel(new DefaultComboBoxModel<>(new String[] { "Microvolution", "none" }));
        val4.setMaximumSize(new java.awt.Dimension(3000, 20));
        val4.setMinimumSize(new java.awt.Dimension(300, 20));
        val4.setPreferredSize(new java.awt.Dimension(3000, 20));
        jPanel4.add(val4);

        val23.setModel(new DefaultComboBoxModel<>(new String[] { "air", "water", "oil" }));
        val23.setMaximumSize(new java.awt.Dimension(3000, 20));
        val23.setMinimumSize(new java.awt.Dimension(300, 20));
        val23.setPreferredSize(new java.awt.Dimension(3000, 20));
        jPanel4.add(val23);

        val5.setText("20");
        val5.setInputVerifier(integerVerifier);
        val5.setMaximumSize(new java.awt.Dimension(3000, 20));
        val5.setMinimumSize(new java.awt.Dimension(300, 20));
        val5.setPreferredSize(new java.awt.Dimension(3000, 20));
        val5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val5ActionPerformed(evt);
            }
        });
        jPanel4.add(val5);

        val6.setText("0.75");
        val6.setInputVerifier(doubleVerifier);
        val6.setMaximumSize(new java.awt.Dimension(3000, 20));
        val6.setMinimumSize(new java.awt.Dimension(300, 20));
        val6.setPreferredSize(new java.awt.Dimension(3000, 20));
        val6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val6ActionPerformed(evt);
            }
        });
        jPanel4.add(val6);

        val7.setText("377.442");
        val7.setInputVerifier(doubleVerifier);
        val7.setMaximumSize(new java.awt.Dimension(3000, 20));
        val7.setMinimumSize(new java.awt.Dimension(300, 20));
        val7.setPreferredSize(new java.awt.Dimension(3000, 20));
        val7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val7ActionPerformed(evt);
            }
        });
        jPanel4.add(val7);

        val8.setText("1500");
        val8.setInputVerifier(doubleVerifier);
        val8.setMaximumSize(new java.awt.Dimension(3000, 20));
        val8.setMinimumSize(new java.awt.Dimension(300, 20));
        val8.setPreferredSize(new java.awt.Dimension(3000, 20));
        val8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val8ActionPerformed(evt);
            }
        });
        jPanel4.add(val8);


        val9.setInputVerifier(integerVerifier);
        val9.setMaximumSize(new java.awt.Dimension(3000, 20));
        val9.setMinimumSize(new java.awt.Dimension(300, 20));
        val9.setPreferredSize(new java.awt.Dimension(3000, 20));
        val9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val9ActionPerformed(evt);
            }
        });
        jPanel4.add(val9);

        val10.setModel(new DefaultComboBoxModel<>(new String[] { "grayscale", "color" }));
        val10.setMaximumSize(new java.awt.Dimension(3000, 20));
        val10.setMinimumSize(new java.awt.Dimension(300, 20));
        val10.setPreferredSize(new java.awt.Dimension(3000, 20));
        jPanel4.add(val10);

        val11.setText("CH1;CH2;CH3;CH4");
        val11.setMaximumSize(new java.awt.Dimension(3000, 20));
        val11.setMinimumSize(new java.awt.Dimension(300, 20));
        val11.setPreferredSize(new java.awt.Dimension(3000, 20));
        val11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val11ActionPerformed(evt);
            }
        });
        jPanel4.add(val11);

        val21.setText("425;525;595;670");
        val21.setMaximumSize(new java.awt.Dimension(3000, 20));
        val21.setMinimumSize(new java.awt.Dimension(300, 20));
        val21.setPreferredSize(new java.awt.Dimension(3000, 20));
        val21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val21ActionPerformed(evt);
            }
        });
        jPanel4.add(val21);

        val12.setModel(new SpinnerNumberModel(1, 1, 200, 1));
        val12.setMaximumSize(new java.awt.Dimension(3000, 20));
        val12.setMinimumSize(new java.awt.Dimension(300, 20));
        val12.setPreferredSize(new java.awt.Dimension(3000, 20));
        val12.setValue(Integer.parseInt("1"));
        val12.setInputVerifier(integerVerifier);
        ((JSpinner.DefaultEditor)val12.getEditor()).getTextField().setHorizontalAlignment(JTextField.LEFT);
        jPanel4.add(val12);

        driftReference = new JSpinner();
        driftReference.setModel(new SpinnerNumberModel(1, 1, 200, 1));
        driftReference.setMaximumSize(new java.awt.Dimension(3000, 20));
        driftReference.setMinimumSize(new java.awt.Dimension(300, 20));
        driftReference.setPreferredSize(new java.awt.Dimension(3000, 20));
        driftReference.setValue(Integer.parseInt("1"));
        driftReference.setInputVerifier(integerVerifier);
        ((JSpinner.DefaultEditor)driftReference.getEditor()).getTextField().setHorizontalAlignment(JTextField.LEFT);
        jPanel4.add(driftReference);

        bestFocusChannel = new JSpinner();
        bestFocusChannel.setModel(new SpinnerNumberModel(1, 1, 200, 1));
        bestFocusChannel.setMaximumSize(new java.awt.Dimension(3000, 20));
        bestFocusChannel.setMinimumSize(new java.awt.Dimension(300, 20));
        bestFocusChannel.setPreferredSize(new java.awt.Dimension(3000, 20));
        bestFocusChannel.setValue(Integer.parseInt("1"));
        bestFocusChannel.setInputVerifier(integerVerifier);
        ((JSpinner.DefaultEditor)bestFocusChannel.getEditor()).getTextField().setHorizontalAlignment(JTextField.LEFT);
        jPanel4.add(bestFocusChannel);

        bestFocusCycle = new JSpinner();
        bestFocusCycle.setModel(new SpinnerNumberModel(1, 1, 200, 1));
        bestFocusCycle.setMaximumSize(new java.awt.Dimension(3000, 20));
        bestFocusCycle.setMinimumSize(new java.awt.Dimension(300, 20));
        bestFocusCycle.setPreferredSize(new java.awt.Dimension(3000, 20));
        bestFocusCycle.setValue(Integer.parseInt("1"));
        bestFocusCycle.setInputVerifier(integerVerifier);
        ((JSpinner.DefaultEditor)bestFocusCycle.getEditor()).getTextField().setHorizontalAlignment(JTextField.LEFT);
        jPanel4.add(bestFocusCycle);

        val13.setText("1-15");
        //val13.setInputVerifier(integerVerifier);
        val13.setMaximumSize(new java.awt.Dimension(3000, 20));
        val13.setMinimumSize(new java.awt.Dimension(300, 20));
        val13.setPreferredSize(new java.awt.Dimension(3000, 20));
        val13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val13ActionPerformed(evt);
            }
        });
        jPanel4.add(val13);

        val14.setMaximumSize(new java.awt.Dimension(3000, 20));
        val14.setMinimumSize(new java.awt.Dimension(300, 20));
        val14.setPreferredSize(new java.awt.Dimension(3000, 20));
        val14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val14ActionPerformed(evt);
            }
        });
        jPanel4.add(val14);

        val15.setMaximumSize(new java.awt.Dimension(3000, 20));
        val15.setMinimumSize(new java.awt.Dimension(300, 20));
        val15.setPreferredSize(new java.awt.Dimension(3000, 20));
        val15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val15ActionPerformed(evt);
            }
        });
        jPanel4.add(val15);

        val16.setModel(new DefaultComboBoxModel<>(new String[] { "snake" }));
        val16.setMaximumSize(new java.awt.Dimension(3000, 20));
        val16.setMinimumSize(new java.awt.Dimension(300, 20));
        val16.setPreferredSize(new java.awt.Dimension(3000, 20));
        jPanel4.add(val16);

        val17.setText("3");
        val17.setInputVerifier(integerVerifier);
        val17.setMaximumSize(new java.awt.Dimension(3000, 20));
        val17.setMinimumSize(new java.awt.Dimension(300, 20));
        val17.setPreferredSize(new java.awt.Dimension(3000, 20));
        val17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val17ActionPerformed(evt);
            }
        });
        jPanel4.add(val17);

        val18.setText("3");
        val18.setInputVerifier(integerVerifier);
        val18.setMaximumSize(new java.awt.Dimension(3000, 20));
        val18.setMinimumSize(new java.awt.Dimension(300, 20));
        val18.setPreferredSize(new java.awt.Dimension(3000, 20));
        val18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val18ActionPerformed(evt);
            }
        });
        jPanel4.add(val18);

        val19.setText("30");
        val19.setInputVerifier(integerVerifier);
        val19.setInputVerifier(integerVerifier);
        val19.setMaximumSize(new java.awt.Dimension(3000, 20));
        val19.setMinimumSize(new java.awt.Dimension(300, 20));
        val19.setPreferredSize(new java.awt.Dimension(3000, 20));
        val19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val19ActionPerformed(evt);
            }
        });
        jPanel4.add(val19);

        val20.setText("30");
        val20.setInputVerifier(integerVerifier);
        val20.setMaximumSize(new java.awt.Dimension(3000, 20));
        val20.setMinimumSize(new java.awt.Dimension(300, 20));
        val20.setPreferredSize(new java.awt.Dimension(3000, 20));
        val20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                val20ActionPerformed(evt);
            }
        });
        jPanel4.add(val20);

        jPanel1.setPreferredSize(new java.awt.Dimension(10000, 19));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(rb_HandE_yes);
        rb_HandE_yes.setText("Yes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        jPanel1.add(rb_HandE_yes, gridBagConstraints);

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setSelected(true);
        jRadioButton2.setText("No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jRadioButton2, gridBagConstraints);

        jPanel4.add(jPanel1);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        userNameLabel = new JLabel();
        userNameLabel.setText("Username");
        userNameLabel.setMaximumSize(new java.awt.Dimension(3000, 20));
        userNameLabel.setMinimumSize(new java.awt.Dimension(100, 20));
        userNameLabel.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(userNameLabel, gridBagConstraints);

        serverLabel = new JLabel();
        serverLabel.setText("Select server");
        serverLabel.setMaximumSize(new java.awt.Dimension(3000, 20));
        serverLabel.setMinimumSize(new java.awt.Dimension(100, 20));
        serverLabel.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(serverLabel, gridBagConstraints);

        jLabel17.setText("Experiment Folder");
        jLabel17.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel17.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel17.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel17, gridBagConstraints);

        jLabel24.setText("Experiment Name");
        jLabel24.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel24.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel24.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel24, gridBagConstraints);

        jLabel1.setText("Project");
        jLabel1.setMaximumSize(new java.awt.Dimension(1000, 20));
        jLabel1.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel1.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel5.add(jLabel1, gridBagConstraints);

        jLabel9.setText("CODEX instrument");
        jLabel9.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel9.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel9.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.fill = GridBagConstraints.NONE;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel9, gridBagConstraints);

        jLabel3.setText("Microscope");
        jLabel3.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel3.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel3.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel3, gridBagConstraints);

        jLabel4.setText("Deconvolution");
        jLabel4.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel4.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel4.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel4, gridBagConstraints);

        jLabel29.setText("Objective Type");
        jLabel29.setMaximumSize(new java.awt.Dimension(40, 20));
        jLabel29.setMinimumSize(new java.awt.Dimension(40, 20));
        jLabel29.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel5.add(jLabel29, gridBagConstraints);

        jLabel5.setText("Magnification (x)");
        jLabel5.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel5.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel5.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel5, gridBagConstraints);

        jLabel10.setText("Numerican Aperture");
        jLabel10.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel10.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel10.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel10, gridBagConstraints);

        jLabel6.setText("Lateral resolution (nm/pixel)");
        jLabel6.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel6.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel6.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel6, gridBagConstraints);

        jLabel8.setText("Z pitch (nm)");
        jLabel8.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel8.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel8.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel8, gridBagConstraints);

        jLabel12.setText("Number of Z-slices");
        jLabel12.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel12.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel12.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel12, gridBagConstraints);

        jLabel13.setText("Color mode");
        jLabel13.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel13.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel13.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel13, gridBagConstraints);

        jLabel14.setText("Channel Names (; del)");
        jLabel14.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel14.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel14.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel14, gridBagConstraints);

        jLabel27.setText("Emission wavelengths (; del)");
        jLabel27.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel27.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel27.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel5.add(jLabel27, gridBagConstraints);

        jLabel15.setText("Drift compensation channel index");
        jLabel15.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel15.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel15.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel15, gridBagConstraints);

        driftReferenceLabel.setText("Drift compensation reference cycle");
        driftReferenceLabel.setMaximumSize(new java.awt.Dimension(3000, 20));
        driftReferenceLabel.setMinimumSize(new java.awt.Dimension(100, 20));
        driftReferenceLabel.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(driftReferenceLabel, gridBagConstraints);

        bestFocusChannelLabel.setText("Best focus channel");
        bestFocusChannelLabel.setMaximumSize(new java.awt.Dimension(3000, 20));
        bestFocusChannelLabel.setMinimumSize(new java.awt.Dimension(100, 20));
        bestFocusChannelLabel.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(bestFocusChannelLabel, gridBagConstraints);

        bestFocusCycleLabel.setText("Best focus cycle");
        bestFocusCycleLabel.setMaximumSize(new java.awt.Dimension(3000, 20));
        bestFocusCycleLabel.setMinimumSize(new java.awt.Dimension(100, 20));
        bestFocusCycleLabel.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(bestFocusCycleLabel, gridBagConstraints);

        jLabel16.setText("Number of cycles/Range");
        jLabel16.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel16.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel16.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel16, gridBagConstraints);


        jLabel25.setText("Region indices (; del)");
        jLabel25.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel25.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel25.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 23;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel5.add(jLabel25, gridBagConstraints);

        jLabel18.setText("Region names (; del)");
        jLabel18.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel18.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel18.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 24;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel18, gridBagConstraints);

        jLabel20.setText("Tiling Mode");
        jLabel20.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel20.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel20.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 25;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel20, gridBagConstraints);

        jLabel19.setText("Region Size X");
        jLabel19.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel19.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel19.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 26;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel19, gridBagConstraints);

        jLabel22.setText("Region Size Y");
        jLabel22.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel22.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel22.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 27;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel22, gridBagConstraints);

        jLabel23.setText("Tile Overlap X (in Percent)");
        jLabel23.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel23.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel23.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 28;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel23, gridBagConstraints);

        jLabel28.setText("Tile Overlap Y (in Percent)");
        jLabel28.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel28.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel28.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 29;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jLabel28, gridBagConstraints);

        jLabel21.setText("H&E staining");
        jLabel21.setMaximumSize(new java.awt.Dimension(3000, 20));
        jLabel21.setMinimumSize(new java.awt.Dimension(100, 20));
        jLabel21.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 30;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel5.add(jLabel21, gridBagConstraints);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 767, Short.MAX_VALUE)
                .addGap(9, 9, 9))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        optionalFragmentLabel = new JLabel();
        focussingOffsetLabel = new JLabel();

        optionalPanel = new JPanel();
        TitledBorder optDetailsBorder = BorderFactory.createTitledBorder("Optional Details for experiment");
        optDetailsBorder.setTitleJustification(TitledBorder.CENTER);
        optionalPanel.setBorder(optDetailsBorder);
        optionalPanel.setLayout(new GridBagLayout());

        optionalFragmentLabel.setText("Focusing fragment");
        optionalFragmentLabel.setMaximumSize(new java.awt.Dimension(3000, 20));
        optionalFragmentLabel.setMinimumSize(new java.awt.Dimension(100, 20));
        optionalFragmentLabel.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.LINE_START;
        //gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        optionalPanel.add(optionalFragmentLabel, gridBagConstraints);

        optionalFragmentButton = new JComboBox<String>();
        optionalFragmentButton.setModel(new DefaultComboBoxModel<>(new String[] { "Yes", "No" }));
        optionalFragmentButton.setSelectedItem("No");
        optionalFragmentButton.setMaximumSize(new java.awt.Dimension(100, 20));
        optionalFragmentButton.setMinimumSize(new java.awt.Dimension(40, 20));
        optionalFragmentButton.setPreferredSize(new java.awt.Dimension(50, 20));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.CENTER;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        optionalPanel.add(optionalFragmentButton, gridBagConstraints);

        focussingOffsetLabel.setText("Focussing offset");
        optionalFragmentLabel.setMaximumSize(new java.awt.Dimension(3000, 20));
        optionalFragmentLabel.setMinimumSize(new java.awt.Dimension(100, 20));
        optionalFragmentLabel.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.LINE_START;
        //gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        optionalPanel.add(focussingOffsetLabel, gridBagConstraints);

        focussingOffset = new JSpinner();
        focussingOffset.setModel(new SpinnerNumberModel(0, -100, 100, 1));
        focussingOffset.setMaximumSize(new java.awt.Dimension(100, 20));
        focussingOffset.setMinimumSize(new java.awt.Dimension(40, 20));
        focussingOffset.setPreferredSize(new java.awt.Dimension(50, 20));
        focussingOffset.setValue(Integer.parseInt("0"));
        focussingOffset.setInputVerifier(integerVerifier);
        ((JSpinner.DefaultEditor) focussingOffset.getEditor()).getTextField().setHorizontalAlignment(JTextField.LEFT);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.CENTER;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        optionalPanel.add(focussingOffset, gridBagConstraints);

        bgSubLabel.setText("Background subtraction");
        bgSubLabel.setMaximumSize(new java.awt.Dimension(3000, 20));
        bgSubLabel.setMinimumSize(new java.awt.Dimension(100, 20));
        bgSubLabel.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.LINE_START;
        //gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        optionalPanel.add(bgSubLabel, gridBagConstraints);

        optionalBgSub = new JComboBox<String>();
        optionalBgSub.setModel(new DefaultComboBoxModel<>(new String[] { "Yes", "No" }));
        optionalBgSub.setSelectedItem("No");
        optionalBgSub.setMaximumSize(new java.awt.Dimension(100, 20));
        optionalBgSub.setMinimumSize(new java.awt.Dimension(40, 20));
        optionalBgSub.setPreferredSize(new java.awt.Dimension(50, 20));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.CENTER;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        optionalPanel.add(optionalBgSub, gridBagConstraints);

        optionalChkTrueCropLabel = new JLabel();
        optionalChkTrueCropLabel.setText("Bleach-minimizing cropping");
        optionalChkTrueCropLabel.setMaximumSize(new java.awt.Dimension(3000, 20));
        optionalChkTrueCropLabel.setMinimumSize(new java.awt.Dimension(100, 20));
        optionalChkTrueCropLabel.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.LINE_START;
        //gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        optionalPanel.add(optionalChkTrueCropLabel, gridBagConstraints);

        optionalChkTrueCrop = new JComboBox<String>();
        optionalChkTrueCrop.setModel(new DefaultComboBoxModel<>(new String[] { "Yes", "No" }));
        optionalChkTrueCrop.setSelectedItem("No");
        optionalChkTrueCrop.setMaximumSize(new java.awt.Dimension(100, 20));
        optionalChkTrueCrop.setMinimumSize(new java.awt.Dimension(40, 20));
        optionalChkTrueCrop.setPreferredSize(new java.awt.Dimension(50, 20));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.CENTER;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        optionalPanel.add(optionalChkTrueCrop, gridBagConstraints);

        optionalChkBlindLabel = new JLabel();
        optionalChkBlindLabel.setText("Blind deconvolution (license reqd.)");
        optionalChkBlindLabel.setMaximumSize(new java.awt.Dimension(3000, 20));
        optionalChkBlindLabel.setMinimumSize(new java.awt.Dimension(100, 20));
        optionalChkBlindLabel.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.LINE_START;
        //gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        optionalPanel.add(optionalChkBlindLabel, gridBagConstraints);

        optionalChkBlind = new JComboBox<String>();
        optionalChkBlind.setModel(new DefaultComboBoxModel<>(new String[] { "Yes", "No" }));
        optionalChkBlind.setSelectedItem("No");
        optionalChkBlind.setMaximumSize(new java.awt.Dimension(100, 20));
        optionalChkBlind.setMinimumSize(new java.awt.Dimension(40, 20));
        optionalChkBlind.setPreferredSize(new java.awt.Dimension(50, 20));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.CENTER;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        optionalPanel.add(optionalChkBlind, gridBagConstraints);

        this.setLayout(new BorderLayout());
        this.add(jPanel2, BorderLayout.PAGE_START);
        this.add(optionalPanel, BorderLayout.PAGE_END);

    }

    private void txtDirMouseReleased(java.awt.event.MouseEvent evt) {
        JFileChooser jfc = new JFileChooser();
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {

            File expJS = new File(jfc.getSelectedFile().getAbsolutePath() + File.separator + "Experiment.json");
            if (expJS.exists()) {
                try {
                    load(expHelper.loadFromJSON(expJS), jfc.getSelectedFile());
                } catch (Exception e) {
                    logger.showException(e);
                }
            } else {
                String err = guessValues(jfc.getSelectedFile());
                if (err.length() > 0) {
                    JOptionPane.showMessageDialog(this, err);
                    throw new IllegalStateException(err);
                }
            }

            txtDir.setText(jfc.getSelectedFile().getAbsolutePath());

            //Include the name of the experiment to be set as folder name
            val1.setText(jfc.getSelectedFile().getName());

            fireStateChanged();

        }
    }

    private void fireStateChanged() {
        PropertyChangeListener[] chl = this.getListeners(PropertyChangeListener.class);
        for (PropertyChangeListener c : chl) {
            c.propertyChange(new PropertyChangeEvent(this, "dir", "...", txtDir.getText()));
        }
    }

    public String getPath() {
        return txtDir.getText();
    }

    public Experiment getExperiment() {
        return buildExperiment();
    }

    /*
    Method to find the total number of Cycle folders present in the experiment directory.
     */
    public static int getMaxCycNumberFromFolder(File dir) {
        ArrayList<Integer> cycNumbers = new ArrayList<Integer>();
        if (dir != null) {
            for (File cyc : dir.listFiles()) {
                if (cyc != null && cyc.isDirectory() && cyc.getName().toLowerCase().startsWith("cyc")) {
                    String cycFolderName = cyc.getName();
                    String[] cycVal = cycFolderName.split("_");
                    cycNumbers.add(Integer.parseInt(cycVal[0].replaceAll("[^0-9]", "")));
                }
            }
        }
        Collections.sort(cycNumbers, Collections.reverseOrder());
        return cycNumbers == null || cycNumbers.isEmpty() ? 0 : cycNumbers.get(0);
    }

    /*
    Method to check if channelNames.txt file is present in the experiment folder
     */
    public boolean isChannelNamesPresent(File dir) {
        File chNames = new File(dir + File.separator + "channelNames.txt");
        return chNames == null ? false : (!chNames.isDirectory() && chNames.exists());
    }


        private String guessValues(File dir) {

        StringBuilder err = new StringBuilder();

        int maxRegion = 0;
        int maxCycle = 0;

        boolean containsBcf = false;
        boolean hasHandE = false;

        for (File f : dir.listFiles(pathname -> pathname.isDirectory() && pathname.getName().startsWith("Cyc"))) {
            if (!containsBcf) {
                containsBcf = f.listFiles(pathname -> pathname.getName().endsWith(".bcf")).length > 0;
            }
            if (containsBcf) {
                val3.setSelectedItem(MicroscopeTypeEnum.KEYENCE);
            }
            String[] s = f.getName().split("_");
            int cyc = Integer.parseInt(s[0].substring(3));
            int reg = Integer.parseInt(s[1].substring(3));

            maxRegion = Math.max(reg, maxRegion);
            maxCycle = Math.max(cyc, maxCycle);
        }

        int[][] occup_table = new int[maxCycle][maxRegion];

        for (File f : dir.listFiles(pathname -> pathname.isDirectory() && pathname.getName().startsWith("Cyc"))) {
            if (!containsBcf) {
                containsBcf = f.listFiles(pathname -> pathname.getName().endsWith(".bcf")).length > 0;
            }
            String[] s = f.getName().split("_");
            int cyc = Integer.parseInt(s[0].substring(3));
            int reg = Integer.parseInt(s[1].substring(3));
            occup_table[cyc - 1][reg - 1]++;
        }

        for (int cyc = 1; cyc <= occup_table.length; cyc++) {
            for (int reg = 1; reg <= occup_table[cyc - 1].length; reg++) {
                if (occup_table[cyc - 1][reg - 1] == 0) {
                    err.append("Missing data: cycle=").append(String.valueOf(cyc)).append(", region=").append(String.valueOf(reg)).append("\n");
                }
                if (occup_table[cyc - 1][reg - 1] > 1) {
                    err.append("Duplicate data: cycle=").append(String.valueOf(cyc)).append(", region=").append(String.valueOf(reg)).append(". Delete duplicate folders before proceeding\n");
                }
            }
        }

        File[] hef = dir.listFiles(pathname -> pathname.isDirectory() && pathname.getName().startsWith("HandE"));

        hasHandE = (hef.length == maxRegion)&&hef.length> 0;

        if (!hasHandE && hef.length > 0) {
            err.append("The experiment has HandE folders, but their number is less than a number of regions");
        }

        if (hasHandE) {
            rb_HandE_yes.setSelected(true);
            maxCycle++;
        }

        rb_HandE_yes.setSelected(hasHandE);

        //val13.setText(String.valueOf(maxCycle));
        val13.setText("");

        String regTxt = "1";
        String regNames = "Region 1";

        for (int i = 2; i <= maxRegion; i++) {
            regTxt += ";" + i;
            regNames += ";Region " + i;
        }

        val14.setText(regTxt);
        val15.setText(regNames);

        guessMicroscope(dir);

        String microscopeType = getCurrentMicroscopeType();
        if(microscopeType == null || microscopeType.equals("")) {
            JOptionPane.showMessageDialog(null, "Microscope type is invalid");
        }

        Microscope microscope = MicroscopeFactory.getMicroscope(microscopeType);
        microscope.guessZSlices(dir, this);
        microscope.guessChannelNamesAndWavelength(dir, this);
        microscope.guessCycleRange(dir, this);

        return err.length() == 0 ? "" : ("Following errors were found in the experiment:\n" + err.toString());
    }

    public String getCurrentMicroscopeType(){
        return val3.getSelectedItem() != null ? val3.getSelectedItem().toString() : "";
    }


    /*
    Set the number of Z-indices after reading it from the experiment folder
    */
    private void guessMicroscope(File dir) {
        boolean flag = false;
        if(dir != null) {
            for (File cyc : dir.listFiles()) {
                if (cyc != null && cyc.isDirectory() && cyc.getName().toLowerCase().startsWith("cyc")) {
                    val3.setSelectedItem(MicroscopeTypeEnum.KEYENCE);
                    flag = true;
                    break;
                }
            }
            if(!flag) {
                val3.setSelectedItem(MicroscopeTypeEnum.ZEISS);
            }
        }
    }

    /*
    Method to load the values from the JSON file and set it to the Experiment property
     */
    public void load(org.nolanlab.CODEX.driffta.Experiment exp, File dir) throws FileNotFoundException {
        txtUsrname.setText(exp.getUserName());
        //to do - set server name value on ui
        val1.setText(exp.getName());
        val2.setText(exp.getCodex_instrument());

        if(exp.getMicroscope() instanceof MicroscopeTypeEnum) {
            val3.setSelectedItem(exp.getMicroscope());
        }
        else {
            if(exp.getMicroscope() == null) {
                guessMicroscope(dir);
            }
        }

        val4.setSelectedItem(exp.getDeconvolution());
        val23.setSelectedItem(exp.getObjectiveType());// out of order
        val5.setText(String.valueOf(exp.getMagnification()));
        val6.setText(String.valueOf(exp.getNumerical_aperture()));
        val7.setText(String.valueOf(exp.getPer_pixel_XY_resolution()));
        val8.setText(String.valueOf(exp.getZ_pitch()));
        val9.setText(String.valueOf(exp.getNum_z_planes()));
        val10.setSelectedItem(exp.getChannel_arrangement());
        val11.setText(expHelper.concat(exp.getChannel_names()));
        val21.setText(expHelper.concat(exp.getEmission_wavelengths())); //OUT OF ORDER
        val12.setValue(exp.getDrift_comp_channel());
        driftReference.setValue(exp.getDriftCompReferenceCycle());
        bestFocusChannel.setValue(exp.getBest_focus_channel());
        bestFocusCycle.setValue(exp.getBestFocusReferenceCycle());
        if(exp.getCycle_upper_limit() != exp.getCycle_lower_limit()) {
            val13.setText(String.valueOf(exp.getCycle_lower_limit()) + "-" + String.valueOf(exp.getCycle_upper_limit()));
        }
        else {
            val13.setText(String.valueOf(exp.getCycle_lower_limit()));
        }
        val14.setText(expHelper.concat(exp.getRegIdx()));
        val15.setText(expHelper.concat(exp.getRegion_names()));
        val16.setSelectedItem(exp.getTiling_mode());
        val17.setText(String.valueOf(exp.getRegion_width()));
        val18.setText(String.valueOf(exp.getRegion_height()));

        //Calculate tile overlap
        if(dir != null) {
            File [] dirList = dir.listFiles();
            outer: for (File cyc : dirList) {
                if (cyc != null && cyc.isDirectory() && cyc.getName().toLowerCase().startsWith("cyc")) {
                    File [] cycList = cyc.listFiles();
                    for(File file : cycList) {
                        if(!file.isDirectory() && (file.getName().endsWith(".tif")||file.getName().endsWith(".tiff"))){
                            ImagePlus imp = IJ.openImage(file.getAbsolutePath());
                            val19.setText(String.valueOf(exp.getTile_overlap_X() * 100/imp.getWidth()));
                            val20.setText(String.valueOf(exp.getTile_overlap_Y() * 100/imp.getHeight()));
                            break outer;
                        }
                    }
                }
            }
        }

        rb_HandE_yes.setSelected(exp.isHandEstain());
        optionalBgSub.setSelectedItem(Boolean.toString(exp.isBgSub()) == null ? "No" : Boolean.toString(exp.isBgSub()).equalsIgnoreCase("true") ? "Yes" : "No");
        optionalChkTrueCrop.setSelectedItem(Boolean.toString(exp.isUseBleachMinimizingCrop()) == null ? "No" : Boolean.toString(exp.isUseBleachMinimizingCrop()).equalsIgnoreCase("true") ? "Yes" : "No");
        optionalChkBlind.setSelectedItem(Boolean.toString(exp.isUseBlindDeconvolution()) == null ? "No" : Boolean.toString(exp.isUseBlindDeconvolution()).equalsIgnoreCase("true") ? "Yes" : "No");
        optionalFragmentButton.setSelectedItem(Boolean.toString(exp.isOptionalFocusFragment()) == null ? "No" : Boolean.toString(exp.isOptionalFocusFragment()).equalsIgnoreCase("true") ? "Yes" : "No");
        focussingOffset.setValue(exp.getFocusing_offset());
        if(exp.isHandEstain()) {
            JRadioButton rb_handE_yes = getRb_HandE_yes();
            ItemListener itl = itemEvent -> {
                int state = itemEvent.getStateChange();
                if (state == ItemEvent.SELECTED) {
                    val13.setText(String.valueOf(exp.getCycle_lower_limit()) + "-" + String.valueOf(exp.getCycle_upper_limit()));
                } else {
                    val13.setText(String.valueOf(exp.getCycle_lower_limit()) + "-" + String.valueOf(exp.getCycle_upper_limit() - 1));
                }
            };
            rb_handE_yes.addItemListener(itl);
        }
        else {
            JRadioButton rb_handE_yes = getRb_HandE_yes();
            ItemListener itl = itemEvent -> {
                int state = itemEvent.getStateChange();
                if (state == ItemEvent.SELECTED) {
                    val13.setText(String.valueOf(exp.getCycle_lower_limit()) + "-" + String.valueOf(exp.getCycle_upper_limit() + 1));
                } else {
                    val13.setText(String.valueOf(exp.getCycle_lower_limit()) + "-" + String.valueOf(exp.getCycle_upper_limit()));
                }
            };
            rb_handE_yes.addItemListener(itl);
        }
    }

    private Experiment buildExperiment() {
        Date date = Calendar.getInstance().getTime();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
        String formattedDate = sdf.format(date);

        String[] regIds = val14.getText().split(";");
        int[] reg = new int[regIds.length];
        for (int i = 0; i < reg.length; i++) {
            reg[i] = Integer.parseInt(regIds[i]);
        }

        String[] wavelenS = val21.getText().split(";");
        int[] wavelen = new int[wavelenS.length];
        for (int i = 0; i < wavelen.length; i++) {
            wavelen[i] = Integer.parseInt(wavelenS[i]);
        }

        if (txtDir.getText().equals("...")) {
            throw new IllegalStateException("Folder not set");
        }

        if(StringUtils.isBlank(val1.getText())) {
            JOptionPane.showMessageDialog(this, "Please enter a valid experiment name");
            throw new IllegalStateException("Please enter a valid experiment name");
        }

        if (val1.getText().equals("<Enter here>")) {
            throw new IllegalStateException("Experiment name not set");
        }



        File dir = new File(txtDir.getText());

        File[] subdir = dir.listFiles(pathname -> pathname.isDirectory() && pathname.getName().startsWith("Cyc"));

        String projName = "p";

        if (val3.getSelectedItem().toString().startsWith("Keyence")) {
            if (subdir.length == 0) {
                System.out.println("Directory does not contain a single folder starting with 'Cyc...'. Please try again!");
                throw new IllegalStateException("Directory" + dir.getAbsolutePath() + " does not contain a single folder starting with 'Cyc...'");
            }

            File[] bcf = subdir[0].listFiles(pathname -> pathname.getName().endsWith(".bcf"));

            if (bcf.length == 0) {
                throw new IllegalStateException("Microscope is set to Keyence but there is no .bcf file in the directory ");
            }

            projName = bcf[0].getName().substring(0, bcf[0].getName().indexOf('.'));

        }

        String microscopeType = val3.getSelectedItem() != null ? val3.getSelectedItem().toString() : "";
        if(microscopeType == null || microscopeType.equals("")) {
            JOptionPane.showMessageDialog(null, "Microscope type is invalid");
        }

        Microscope microscope = MicroscopeFactory.getMicroscope(microscopeType);

        //New feature to support range for number of cycles
        String cyc = val13.getText();
        int count = 0;
        for( int i=0; i<cyc.length(); i++ ) {
            if( cyc.charAt(i) == '-' ) {
                count++;
            }
        }
        int lowerCycLimit = 0;
        int upperCycLimit = 0;
        if(count == 0) {
            lowerCycLimit = StringUtils.isNumeric(val13.getText()) ? Integer.parseInt(val13.getText()) : Integer.MIN_VALUE;
            upperCycLimit = lowerCycLimit;
            if(lowerCycLimit == 0) {
                JOptionPane.showMessageDialog(this, "The number of cycles/range cannot be 0.");
                throw new IllegalStateException("The number of cycles/range cannot be 0.");
            }
            if(lowerCycLimit == Integer.MIN_VALUE) {
                JOptionPane.showMessageDialog(this, "The number of cycles is not a number. Please enter a number or range.");
                throw new IllegalStateException("The number of cycles is not a number. Please enter a number or range.");
            }
            if(Integer.parseInt(driftReference.getValue().toString()) > lowerCycLimit) {
                JOptionPane.showMessageDialog(this, "Drift compensation reference cycle is invalid.");
                throw new IllegalStateException("Drift compensation reference cycle is invalid.");
            }
            if(Integer.parseInt(bestFocusCycle.getValue().toString()) > lowerCycLimit) {
                JOptionPane.showMessageDialog(this, "Best focus cycle is invalid.");
                throw new IllegalStateException("Best focus cycle is invalid.");
            }
        }
        else if(count == 1) {
            String[] cycLimits = val13.getText().split("-");
            if(cycLimits != null && cycLimits.length != 0) {
                lowerCycLimit = StringUtils.isNumeric(cycLimits[0]) ? Integer.parseInt(cycLimits[0]) : Integer.MIN_VALUE;
                upperCycLimit = StringUtils.isNumeric(cycLimits[1]) ? Integer.parseInt(cycLimits[1]) : Integer.MAX_VALUE;
            }
            if(lowerCycLimit > upperCycLimit) {
                JOptionPane.showMessageDialog(this, "The lower limit on the range of number of cycles cannot be greater than the upper limit.");
                throw new IllegalStateException("The lower limit on the range of number of cycles cannot be greater than the upper limit.");
            }
            if(lowerCycLimit == upperCycLimit) {
                JOptionPane.showMessageDialog(this, "The lower limit on the range of number of cycles cannot be equal to the upper limit.");
                throw new IllegalStateException("The lower limit on the range of number of cycles cannot be equal to the upper limit.");
            }
            if(lowerCycLimit == Integer.MIN_VALUE) {
                JOptionPane.showMessageDialog(this, "The lower limit on the range of number of cycles is not a number. Please enter a number.");
                throw new IllegalStateException("The lower limit on the range of number of cycles is not a number. Please enter a number.");
            }
            if(upperCycLimit == Integer.MAX_VALUE) {
                JOptionPane.showMessageDialog(this, "The upper limit on the range of number of cycles is not a number. Please enter a number.");
                throw new IllegalStateException("The upper limit on the range of number of cycles is not a number. Please enter a number.");
            }
            if(lowerCycLimit < 1) {
                JOptionPane.showMessageDialog(this, "The lower limit on the range of number of cycles is invalid.");
                throw new IllegalStateException("The lower limit on the range of number of cycles is invalid.");
            }

            if(!rb_HandE_yes.isSelected()) {
                if (upperCycLimit > microscope.getMaxCycNumberFromFolder(dir)) {
                    JOptionPane.showMessageDialog(this, "The upper limit on the range of number of cycles is invalid.");
                    throw new IllegalStateException("The upper limit on the range of number of cycles is invalid.");
                }
            }
            else {
                if (upperCycLimit > 1+microscope.getMaxCycNumberFromFolder(dir)) {
                    JOptionPane.showMessageDialog(this, "The upper limit on the range of number of cycles is invalid for this experiment with H&E stain.");
                    throw new IllegalStateException("The upper limit on the range of number of cycles is invalid for this experiment with H&E stain.");
                }
            }
            if(Integer.parseInt(driftReference.getValue().toString()) < lowerCycLimit || Integer.parseInt(driftReference.getValue().toString()) > upperCycLimit) {
                JOptionPane.showMessageDialog(this, "Drift compensation reference cycle is invalid.");
                throw new IllegalStateException("Drift compensation reference cycle is invalid.");
            }
            if(Integer.parseInt(bestFocusCycle.getValue().toString()) < lowerCycLimit || Integer.parseInt(bestFocusCycle.getValue().toString()) > upperCycLimit) {
                JOptionPane.showMessageDialog(this, "Best focus cycle is invalid.");
                throw new IllegalStateException("Best focus cycle is invalid.");
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "Please enter a valid number or range for number of cycles.");
            throw new IllegalStateException("Please enter a valid number or range for number cycles.");
        }

        if(StringUtils.isBlank(val19.getText()) || StringUtils.isBlank(val20.getText())) {
            JOptionPane.showMessageDialog(this, "Please enter a valid percentage value for tile overlap.");
            throw new IllegalStateException("Please enter a valid percentage value for tile overlap.");
        }

        Experiment exp = new Experiment();

        exp.setUserName(txtUsrname.getText());
        //add server config here - to do
        exp.setName(val1.getText());
        exp.setDate(formattedDate);
        exp.setCodex_instrument(val2.getText());
        exp.setMicroscope((MicroscopeTypeEnum)val3.getSelectedItem());
        exp.setDeconvolution(val4.getSelectedItem().toString());
        exp.setMagnification(Integer.valueOf(val5.getText()));
        exp.setNumerical_aperture(Double.valueOf(val6.getText()));
        exp.setPer_pixel_XY_resolution(Double.valueOf(val7.getText()));
        exp.setZ_pitch(Double.valueOf(val8.getText()));
        exp.setNum_z_planes(Integer.parseInt(val9.getText()));
        exp.setChannel_arrangement((String) val10.getSelectedItem());
        exp.setChannel_names(val11.getText().split(";"));
        exp.setEmission_wavelengths(wavelen);
        exp.setDrift_comp_channel(Integer.parseInt(val12.getValue().toString()));
        exp.setDriftCompReferenceCycle(Integer.parseInt(driftReference.getValue().toString()));
        exp.setBest_focus_channel(Integer.parseInt(bestFocusChannel.getValue().toString()));
        exp.setBestFocusReferenceCycle(Integer.parseInt(bestFocusCycle.getValue().toString()));
        exp.setCycle_lower_limit(lowerCycLimit);
        exp.setCycle_upper_limit(upperCycLimit);
        exp.setRegIdx(reg);
        exp.setRegion_names(val15.getText().split(";"));
        exp.setTiling_mode((String) val16.getSelectedItem());
        exp.setRegion_width(Integer.parseInt(val17.getText()));
        exp.setRegion_height(Integer.parseInt(val18.getText()));
        exp.setTile_overlap_X(Integer.parseInt(val19.getText()));
        exp.setTile_overlap_Y(Integer.parseInt(val20.getText()));
        exp.setObjectiveType(val23.getSelectedItem().toString());
        exp.setHandEstain(rb_HandE_yes.isSelected());
        exp.setBgSub("Yes".equalsIgnoreCase(optionalBgSub.getSelectedItem().toString()));
        exp.setProjName(projName);
        exp.setOptionalFocusFragment("Yes".equalsIgnoreCase(optionalFragmentButton.getSelectedItem().toString()));
        exp.setFocusing_offset(Integer.parseInt(focussingOffset.getValue().toString()));
        exp.setUseBleachMinimizingCrop("Yes".equalsIgnoreCase(optionalChkTrueCrop.getSelectedItem().toString()));
        exp.setUseBlindDeconvolution("Yes".equalsIgnoreCase(optionalChkBlind.getSelectedItem().toString()));

        return exp;
    }

    private final InputVerifier driftCompChVerifier = new InputVerifier() {
        @Override
        public boolean verify(JComponent input) {
            JTextField tf = (JTextField) input;
            try {
                int val = Integer.parseInt(tf.getText());
                if (val < 1 || val > val11.getText().split(";").length) {
                    throw new NumberFormatException("The value should be between 1 and the number of entries in the channel names list");
                }
                return true;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(ExperimentView.this, "Not a valid integer:" + e.getMessage());
                return false;

            }
        }
    };

    private final InputVerifier integerVerifier = new InputVerifier() {
        @Override
        public boolean verify(JComponent input) {
            JTextField tf = (JTextField) input;
            try {
                int val = Integer.parseInt(tf.getText());
                if (val < 1) {
                    throw new NumberFormatException("the number must be 1 or greater");
                }
                return true;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(ExperimentView.this, "Not a valid integer: " + e.getMessage());
                return false;
            }
        }
    };

    private final InputVerifier doubleVerifier = new InputVerifier() {
        @Override
        public boolean verify(JComponent input) {
            JTextField tf = (JTextField) input;
            try {
                double val = Double.parseDouble(tf.getText());
                if (val <= 0) {
                    throw new NumberFormatException("the number cannot be negative or zero");
                }
                return true;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(ExperimentView.this, "Not a valid floating-point number: " + e.getMessage());
                return false;

            }
        }
    };

    private void txtDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDirActionPerformed

    }//GEN-LAST:event_txtDirActionPerformed

    private void val1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val1ActionPerformed

    private void val2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val2ActionPerformed

    private void val5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val5ActionPerformed

    private void val6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val6ActionPerformed

    private void val7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val7ActionPerformed

    private void val8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val8ActionPerformed

    private void val9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val9ActionPerformed

    private void val11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val11ActionPerformed

    private void val21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val21ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val21ActionPerformed

    private void val12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val12ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val12ActionPerformed

    private void val13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val13ActionPerformed

    private void val14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val14ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val14ActionPerformed

    private void val15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val15ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val15ActionPerformed

    private void val17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val17ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val17ActionPerformed

    private void val18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val18ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val18ActionPerformed

    private void val19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val19ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val19ActionPerformed

    private void val20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_val20ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_val20ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel bgSubLabel;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private JLabel driftReferenceLabel;
    private JLabel bestFocusCycleLabel;
    private JLabel bestFocusChannelLabel;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton jRadioButton2;
    private JTextField jTextField1;
    private javax.swing.JRadioButton rb_HandE_yes;
    private javax.swing.JComboBox<String> optionalBgSub;
    private JTextField txtDir;
    private JTextField val1;
    private javax.swing.JComboBox<String> val10;
    private JTextField val11;
    private JSpinner val12;
    private JTextField val13;
    private JTextField val14;
    private JTextField val15;
    private javax.swing.JComboBox<String> val16;
    private JTextField val17;
    private JTextField val18;
    private JTextField val19;
    private JTextField val2;
    private JTextField val20;
    private JTextField val21;
    private javax.swing.JComboBox<String> val23;
    private javax.swing.JComboBox<MicroscopeTypeEnum> val3;
    private javax.swing.JComboBox<String> val4;
    private JTextField val5;
    private JTextField val6;
    private JTextField val7;
    private JTextField val8;
    private JTextField val9;
    private JSpinner driftReference;
    private JSpinner bestFocusCycle;
    private JSpinner bestFocusChannel;
    private JLabel optionalFragmentLabel;
    private JLabel focussingOffsetLabel;
    private JComboBox<String> optionalFragmentButton;
    private JSpinner focussingOffset;
    private JPanel optionalPanel;
    private JLabel optionalChkBlindLabel;
    private JComboBox<String> optionalChkBlind;
    private JLabel optionalChkTrueCropLabel;
    private JComboBox<String> optionalChkTrueCrop;
    private JLabel userNameLabel;
    private JTextField txtUsrname;
    private JComboBox<String> serverName;
    private JLabel serverLabel;


    private ExperimentHelper expHelper;

    public ButtonGroup getButtonGroup1() {
        return buttonGroup1;
    }

    public void setButtonGroup1(ButtonGroup buttonGroup1) {
        this.buttonGroup1 = buttonGroup1;
    }

    public JLabel getjLabel1() {
        return jLabel1;
    }

    public void setjLabel1(JLabel jLabel1) {
        this.jLabel1 = jLabel1;
    }

    public JLabel getjLabel10() {
        return jLabel10;
    }

    public void setjLabel10(JLabel jLabel10) {
        this.jLabel10 = jLabel10;
    }

    public JLabel getjLabel12() {
        return jLabel12;
    }

    public void setjLabel12(JLabel jLabel12) {
        this.jLabel12 = jLabel12;
    }

    public JLabel getjLabel13() {
        return jLabel13;
    }

    public void setjLabel13(JLabel jLabel13) {
        this.jLabel13 = jLabel13;
    }

    public JLabel getjLabel14() {
        return jLabel14;
    }

    public void setjLabel14(JLabel jLabel14) {
        this.jLabel14 = jLabel14;
    }

    public JLabel getjLabel15() {
        return jLabel15;
    }

    public void setjLabel15(JLabel jLabel15) {
        this.jLabel15 = jLabel15;
    }

    public JLabel getjLabel16() {
        return jLabel16;
    }

    public void setjLabel16(JLabel jLabel16) {
        this.jLabel16 = jLabel16;
    }

    public JLabel getjLabel17() {
        return jLabel17;
    }

    public void setjLabel17(JLabel jLabel17) {
        this.jLabel17 = jLabel17;
    }

    public JLabel getjLabel18() {
        return jLabel18;
    }

    public void setjLabel18(JLabel jLabel18) {
        this.jLabel18 = jLabel18;
    }

    public JLabel getjLabel19() {
        return jLabel19;
    }

    public void setjLabel19(JLabel jLabel19) {
        this.jLabel19 = jLabel19;
    }

    public JLabel getjLabel20() {
        return jLabel20;
    }

    public void setjLabel20(JLabel jLabel20) {
        this.jLabel20 = jLabel20;
    }

    public JLabel getjLabel21() {
        return jLabel21;
    }

    public void setjLabel21(JLabel jLabel21) {
        this.jLabel21 = jLabel21;
    }

    public JLabel getjLabel22() {
        return jLabel22;
    }

    public void setjLabel22(JLabel jLabel22) {
        this.jLabel22 = jLabel22;
    }

    public JLabel getjLabel23() {
        return jLabel23;
    }

    public void setjLabel23(JLabel jLabel23) {
        this.jLabel23 = jLabel23;
    }

    public JLabel getjLabel24() {
        return jLabel24;
    }

    public void setjLabel24(JLabel jLabel24) {
        this.jLabel24 = jLabel24;
    }

    public JLabel getjLabel25() {
        return jLabel25;
    }

    public void setjLabel25(JLabel jLabel25) {
        this.jLabel25 = jLabel25;
    }

    public JLabel getjLabel27() {
        return jLabel27;
    }

    public void setjLabel27(JLabel jLabel27) {
        this.jLabel27 = jLabel27;
    }

    public JLabel getjLabel28() {
        return jLabel28;
    }

    public void setjLabel28(JLabel jLabel28) {
        this.jLabel28 = jLabel28;
    }

    public JLabel getjLabel29() {
        return jLabel29;
    }

    public void setjLabel29(JLabel jLabel29) {
        this.jLabel29 = jLabel29;
    }

    public JLabel getDriftReferenceLabel() {
        return driftReferenceLabel;
    }

    public void setDriftReferenceLabel(JLabel driftReferenceLabel) {
        this.driftReferenceLabel = driftReferenceLabel;
    }

    public JLabel getBestFocusCycleLabel() {
        return bestFocusCycleLabel;
    }

    public void setBestFocusCycleLabel(JLabel bestFocusCycleLabel) {
        this.bestFocusCycleLabel = bestFocusCycleLabel;
    }

    public JLabel getBestFocusChannelLabel() {
        return bestFocusChannelLabel;
    }

    public void setBestFocusChannelLabel(JLabel bestFocusChannelLabel) {
        this.bestFocusChannelLabel = bestFocusChannelLabel;
    }

    public JLabel getjLabel3() {
        return jLabel3;
    }

    public void setjLabel3(JLabel jLabel3) {
        this.jLabel3 = jLabel3;
    }

    public JLabel getjLabel4() {
        return jLabel4;
    }

    public void setjLabel4(JLabel jLabel4) {
        this.jLabel4 = jLabel4;
    }

    public JLabel getjLabel5() {
        return jLabel5;
    }

    public void setjLabel5(JLabel jLabel5) {
        this.jLabel5 = jLabel5;
    }

    public JLabel getjLabel6() {
        return jLabel6;
    }

    public void setjLabel6(JLabel jLabel6) {
        this.jLabel6 = jLabel6;
    }

    public JLabel getjLabel8() {
        return jLabel8;
    }

    public void setjLabel8(JLabel jLabel8) {
        this.jLabel8 = jLabel8;
    }

    public JLabel getjLabel9() {
        return jLabel9;
    }

    public void setjLabel9(JLabel jLabel9) {
        this.jLabel9 = jLabel9;
    }

    public JPanel getjPanel1() {
        return jPanel1;
    }

    public void setjPanel1(JPanel jPanel1) {
        this.jPanel1 = jPanel1;
    }

    public JPanel getjPanel2() {
        return jPanel2;
    }

    public void setjPanel2(JPanel jPanel2) {
        this.jPanel2 = jPanel2;
    }

    public JPanel getjPanel4() {
        return jPanel4;
    }

    public void setjPanel4(JPanel jPanel4) {
        this.jPanel4 = jPanel4;
    }

    public JPanel getjPanel5() {
        return jPanel5;
    }

    public void setjPanel5(JPanel jPanel5) {
        this.jPanel5 = jPanel5;
    }

    public JRadioButton getjRadioButton2() {
        return jRadioButton2;
    }

    public void setjRadioButton2(JRadioButton jRadioButton2) {
        this.jRadioButton2 = jRadioButton2;
    }

    public JTextField getjTextField1() {
        return jTextField1;
    }

    public void setjTextField1(JTextField jTextField1) {
        this.jTextField1 = jTextField1;
    }

    public JRadioButton getRb_HandE_yes() {
        return rb_HandE_yes;
    }

    public void setRb_HandE_yes(JRadioButton rb_HandE_yes) {
        this.rb_HandE_yes = rb_HandE_yes;
    }

    public JTextField getTxtDir() {
        return txtDir;
    }

    public void setTxtDir(JTextField txtDir) {
        this.txtDir = txtDir;
    }

    public JTextField getVal1() {
        return val1;
    }

    public void setVal1(JTextField val1) {
        this.val1 = val1;
    }

    public JComboBox<String> getVal10() {
        return val10;
    }

    public void setVal10(JComboBox<String> val10) {
        this.val10 = val10;
    }

    public JTextField getVal11() {
        return val11;
    }

    public void setVal11(JTextField val11) {
        this.val11 = val11;
    }

    public JSpinner getVal12() {
        return val12;
    }

    public void setVal12(JSpinner val12) {
        this.val12 = val12;
    }

    public JTextField getVal13() {
        return val13;
    }

    public void setVal13(JTextField val13) {
        this.val13 = val13;
    }

    public JTextField getVal14() {
        return val14;
    }

    public void setVal14(JTextField val14) {
        this.val14 = val14;
    }

    public JTextField getVal15() {
        return val15;
    }

    public void setVal15(JTextField val15) {
        this.val15 = val15;
    }

    public JComboBox<String> getVal16() {
        return val16;
    }

    public void setVal16(JComboBox<String> val16) {
        this.val16 = val16;
    }

    public JTextField getVal17() {
        return val17;
    }

    public void setVal17(JTextField val17) {
        this.val17 = val17;
    }

    public JTextField getVal18() {
        return val18;
    }

    public void setVal18(JTextField val18) {
        this.val18 = val18;
    }

    public JTextField getVal19() {
        return val19;
    }

    public void setVal19(JTextField val19) {
        this.val19 = val19;
    }

    public JTextField getVal2() {
        return val2;
    }

    public void setVal2(JTextField val2) {
        this.val2 = val2;
    }

    public JTextField getVal20() {
        return val20;
    }

    public void setVal20(JTextField val20) {
        this.val20 = val20;
    }

    public JTextField getVal21() {
        return val21;
    }

    public void setVal21(JTextField val21) {
        this.val21 = val21;
    }

    public JComboBox<String> getVal23() {
        return val23;
    }

    public void setVal23(JComboBox<String> val23) {
        this.val23 = val23;
    }

    public JComboBox<MicroscopeTypeEnum> getVal3() {
        return val3;
    }

    public void setVal3(JComboBox<MicroscopeTypeEnum> val3) {
        this.val3 = val3;
    }

    public JComboBox<String> getVal4() {
        return val4;
    }

    public void setVal4(JComboBox<String> val4) {
        this.val4 = val4;
    }

    public JTextField getVal5() {
        return val5;
    }

    public void setVal5(JTextField val5) {
        this.val5 = val5;
    }

    public JTextField getVal6() {
        return val6;
    }

    public void setVal6(JTextField val6) {
        this.val6 = val6;
    }

    public JTextField getVal7() {
        return val7;
    }

    public void setVal7(JTextField val7) {
        this.val7 = val7;
    }

    public JTextField getVal8() {
        return val8;
    }

    public void setVal8(JTextField val8) {
        this.val8 = val8;
    }

    public JTextField getVal9() {
        return val9;
    }

    public void setVal9(JTextField val9) {
        this.val9 = val9;
    }

    public JSpinner getDriftReference() {
        return driftReference;
    }

    public void setDriftReference(JSpinner driftReference) {
        this.driftReference = driftReference;
    }

    public JSpinner getBestFocusCycle() {
        return bestFocusCycle;
    }

    public void setBestFocusCycle(JSpinner bestFocusCycle) {
        this.bestFocusCycle = bestFocusCycle;
    }

    public JSpinner getBestFocusChannel() {
        return bestFocusChannel;
    }

    public void setBestFocusChannel(JSpinner bestFocusChannel) {
        this.bestFocusChannel = bestFocusChannel;
    }

    public JLabel getOptionalFragmentLabel() {
        return optionalFragmentLabel;
    }

    public void setOptionalFragmentLabel(JLabel optionalFragmentLabel) {
        this.optionalFragmentLabel = optionalFragmentLabel;
    }

    public JLabel getFocussingOffsetLabel() {
        return focussingOffsetLabel;
    }

    public void setFocussingOffsetLabel(JLabel focussingOffsetLabel) {
        this.focussingOffsetLabel = focussingOffsetLabel;
    }

    public JComboBox<String> getOptionalFragmentButton() {
        return optionalFragmentButton;
    }

    public void setOptionalFragmentButton(JComboBox<String> optionalFragmentButton) {
        this.optionalFragmentButton = optionalFragmentButton;
    }

    public JSpinner getFocussingOffset() {
        return focussingOffset;
    }

    public void setFocussingOffset(JSpinner focussingOffset) {
        this.focussingOffset = focussingOffset;
    }

    public JPanel getOptionalPanel() {
        return optionalPanel;
    }

    public void setOptionalPanel(JPanel optionalPanel) {
        this.optionalPanel = optionalPanel;
    }

    public JComboBox<String> getServerName() {
        return serverName;
    }

    public void setServerName(JComboBox<String> serverName) {
        this.serverName = serverName;
    }
}
